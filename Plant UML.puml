@startuml

class InterfaceGerenciadorDeProjetos {
    - JList<Projeto> listaProjetos
    - DefaultListModel<Projeto> modeloProjetos
    - JList<Recurso> listaRecursos
    - DefaultListModel<Recurso> modeloRecursos
    - GerenciadorDeProjetos gerenciador
    + InterfaceGerenciadorDeProjetos()
    + void carregarProjetos()
    + void adicionarProjeto()
    + void removerProjeto()
    + void editarProjeto()
    + void adicionarRecurso()
    + void editarRecurso()
    + void removerRecurso()
    + void calcularMochila()
    + void carregarRecursosDoProjeto(Projeto projeto)
}

class MochilaAlgoritmoEstrela {
    + List<Recurso> otimizarRecursos(List<Recurso> recursos, double limiteCusto)
    - List<Recurso> resolverAEstrela(List<Recurso> recursos, double limiteCusto)
    - double calcularValorMaximoEstimado(List<Recurso> itensAtuais, List<Recurso> recursos)
}

class Projeto {
    - int id
    - String nome
    - double orcamento
    - List<Recurso> recursos
    + Projeto(String nome, double orcamento)
    + Projeto()
    + void salvar()
    + void adicionarRecurso(Recurso recurso)
    + void carregarRecursos()
    + int getId()
    + String getNome()
    + double getOrcamento()
    + void setOrcamento(double orcamento)
    + void setNome(String nome)
    + void setRecursos(List<Recurso> recursos)
    + void setId(int id)
    + void editarProjeto(String novoNome, double novoOrcamento)
    + void removerRecurso(int idRecurso)
}

class Recurso {
    - int id
    - String nome
    - double custo
    - double valorAgregado
    + Recurso(String nome, double custo, double valorAgregado)
    + Recurso(int id, String nome, double custo, double valorAgregado)
    + Recurso()
    + int getId()
    + String getNome()
    + double getCusto()
    + double getValorAgregado()
    + void editarRecurso(String novoNome, double novoCusto, double novoValor)
    + void setNome(String nome)
    + void setCusto(double custo)
    + void setValorAgregado(double valorAgregado)
    + void setId(int id)
}

class GerenciadorDeProjetos {
    - Connection conn
    + GerenciadorDeProjetos()
    + void adicionarProjeto(Projeto projeto) throws SQLException
    + void editarProjeto(Projeto projeto) throws SQLException
    + void removerProjeto(int idProjeto) throws SQLException
    + void adicionarRecurso(Recurso recurso, int idProjeto) throws SQLException
    + void editarRecurso(Recurso recurso) throws SQLException
    + void removerRecurso(int idRecurso) throws SQLException
    + List<Projeto> listarProjetos() throws SQLException
    + List<Recurso> listarRecursos(int idProjeto) throws SQLException
}

class ConexaoBanco {
    - static Connection conexao
    + static Connection conectar()
    + static void desconectar()
}

InterfaceGerenciadorDeProjetos --> GerenciadorDeProjetos : usa
GerenciadorDeProjetos o-- Projeto : gerencia
GerenciadorDeProjetos o-- Recurso : gerencia
Projeto *-- Recurso : cont√©m

@enduml